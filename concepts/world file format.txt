=================== WORLD FILE FORMAT SPECIFICATION ====================

BRIEF DESCRIPTION

The world file holds an information about the whole game world,
including the terrain, game objects, NPCs, items, player state etc. It
is also used as a save file - each saved game is saved in one save file
that contains the state of the whole world.

------------------------------------------------------------------------

DEFINITIONS

The world file is saved in text format. The file consists of so called
sections. Each section is used to specify one kind of data. The order
of the sections is important and is given in a chapter below. A section
is defined as:

section_name:
data_lines
end

where section_name is the name (type) od the section, end is a keyword
marking the section end and data_lines is a variable number of lines
whose format depends on the type of the section. These lines are called
data lines and they contains concrete data of the section.

The file format uses specific data types that are:

- integer: integer value (Python-like)
- string: string value that is NOT enclosed within quotation marks
- float: floating point value (Python-like)
- bool: boolean value that can be either T (true) or F (false)

Finally there are a few more terms to be defined. These are:

- RPG class: Refers to a class of objects in RPG world. Furthermore
  there are subclasses such as RPG item class, RPG NPC class etc. Non
  of the term mentioned is NOT to be confused with programming language
  classes or RPG character classes such as warrior, mage etc. For
  example, a healing potion +20 HP is an RPG class - concrete
  healing potions +20 HP that are placed in the game world are RPG
  instances of the RPG class mentioned.

- RPG instance: concrete instance (occurence) of RPG class that is
  placed in the game world. Again, these are NOT programming
  language class instances.

------------------------------------------------------------------------

SECTIONS

The following chapter describes individual sections that the world file
can contain. The section order must be as follows:

- terrain
- interiors
- shadows
- tiles
- npc_classes
- prop_classes
- item_classes
- npc_instances
- prop_instances
- item_instances
- spells
- instances

----------------------

npc_classes

  Defines RPG NPC classes (not RPG NPC instances, see above).

data line format:

----------------------

tiles

  Defines world tiles that the game world terrain (and interiors)
  consist of, such as grass, mud, snow etc.

data line format:

  id name priority variants animated steppable flyable swimmable

  id        integer     unique integer tile identifier
  name      string      tile name that will be used to identify the
                        image file in resources, the game will be
                        searching for file named "tile_" + name +
                        ".png" in the resources folder
  priority  integer     determines how the tiles will overlap on
                        borders, the tile with higher priority will
                        overlap the lower priority tile, this is ignored
                        for animated tiles (as they cannot have borders)
  variants  integer     says how many variants (for non-animated) or
                        animation frames (for animated) there are, this
                        must be a number in range <1,4>
  animated  boolean     says whether the tile is animated, note that
                        animated tiles cannot have borders and should
                        be overlapped by another tile on its border
  steppable boolean     says whether the tile can be stepped onto
  flyable   boolean     says whether the tile can be flown over
  swimmable boolean     says whether the tile can be swimmed on

----------------------

shadows

  Defines shadows that RPG instances, such as props or NPCs, can have.

data line format:

  id name

  id        integer     unique integer shadow identifier
  name      string      name that will be used to identify the
                        filename of the shadow image in resources
                        folder, the game will be looking for file named
                        "shadow_" + shadow + ".png" in the resource
                        folder
----------------------

prop_classes

  Defines RPG prop classes (not RPG prop instances, see above). These
  are things that are placed in the world (exterior or interior), they
  occupy space (so they can block way) and can potentially be interacted
  with, such as trees, levers, carpets, rocks, houses etc.

data line format:

  id name shadow width height walkable swimmable flyable frames speed draw mask

  id        integer     unique integer prop identifier
  name      string      tile name that will be used to identify the
                        image file in resources, the game will be
                        searching for file named "prop_" + name +
                        ".png" in the resources folder
  shadow    integer     if a special '!' symbol is given, no shadow is
                        used
  width     integer     prop width in tiles
  height    integer     prop height in tiles
  walkable  boolean     says if the area occupied by the prop can be
                        walked onto
  swimmable boolean     says if the area occupied by the prop can be
                        swimmed on
  flyable   boolean     says if the area occupied by the prop can be
                        flown over
  frames    integer     says how many animation frames does the prop
                        have, maximum is 10, minimum is 0 (non-animated)
  speed     float       animation speed multiplier, 1.0 is normal speed,
                        ignored for non-animated props
  draw      bool        says whether to draw the prop over other things
                        (T, such as a house) or under things
                        (F, such as a carpet on the ground)
  mask      ...         specifies the mask for the prop that says
                        which tiles of the rectangle specified by
                        width and height are actually occupied by the
                        prop, it is a sequence of integers separated by
                        spaced, which represent the lines of tiles
                        (left to right, top to bottom), 1 means the tile
                        is occupied, 0 means the tile is not occupied,
                        for example for a prop of size 2 x 2 the mask
                        could be: 0 1 1 1

----------------------

terrain

  Defines the world exterior terrain, i.e. 2D grid of tiles.

data line format:
  The first data line is the world exterior width in tiles (integer).
  The second data line is the world exterior height in tiles (integer).
  Then the terrain data lines follow. Each terrain data line represents
  one line of the world 2D tile array and it contains alternating
  integer values (separated by spaces) representing a tile id and a tile
  variant number. So for example if the world width was 2, the line
  would consist of 4 numbers that could look like this: 0 1 2 1 - this
  would mean the first tile is a tile with id 0 and its wariant is 1,
  the second tile is a tile with id 2 and its variant is 1.

----------------------

interiors

  Defines interiors, i.e. house interiors, caves etc. The interior is,
  similarly to world exterior, a 2D array of tiles.

data line format:

  id name width height tiles

  id        integer     unique integer interior identifier
  name      string      interior name to be displayed in the game
  width     integer     interior tile array width in tiles
  height    integer     interior tile array height in tiles
  tiles     ...         an alternating sequence of integers, this is
                        the same as with world exterior tile array
                        definition (tile id and variant numbers), the
                        only difference is that the tile array lines
                        are not separated by newlines but just with
                        spaces so they stay in the interior data line.
----------------------

item_classes

  Defines RPG item classes (not RPG item instances, see above).

data line format:

----------------------

spells

  Defines spells.

data line format:

----------------------

- npc_instances

----------------------

- prop_instances

data line format:

  inst_id id x y

  inst_id   integer     unique instance id
  id        integer     prop id
  x         integer     prop bottom left corner x world coordinate in
                        tiles
  y         integer     prop bottom left corner y world coordinate in
                        tiles

----------------------

- item_instances

------------------------------------------------------------------------

EXAMPLE



items:
end

npcs:
end

tiles:
0 "grass" 10 3 F T T F
1 "water" 0  4 T F T T
2 "road"  5  3 F T T F
3 "rock"  9  4 F T T F
end

terrain:
5
3
1 0 1 0 1 1 1 1 2 2
1 1 1 1 0 0 2 0 2 0
0 0 0 3 0 1 2 1 0 2
end

interiors:
0 "cavern" 3 2 3 0 3 0 3 1 3 1 3 1 3 1
1 "cavern 2" 2 4 3 0 3 0 3 1 3 1 3 0 3 0 3 1 3 0
end
